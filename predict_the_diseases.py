# -*- coding: utf-8 -*-
"""predict-the-diseases.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/seokochin/1d404c56b7bc1b6c01a4a9094e6ecc65/predict-the-diseases.ipynb
"""

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score

# Load the dataset
data = pd.read_csv('patient_data.csv')

# Extract the patient summaries and diseases
summaries = data['summary']
diseases = data['disease']

# Create a bag of words representation of the patient summaries
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(summaries)

# Train a Multinomial Naive Bayes classifier on the full dataset
clf = MultinomialNB()
clf.fit(X, diseases)

# Evaluate the accuracy of the classifier
X_pred = clf.predict(X)
accuracy = accuracy_score(diseases, X_pred)
print("Accuracy:", accuracy)

# Prompt the user to enter patient summaries in a while loop
while True:
    new_summary = input("Enter the patient summary (or 'quit' to exit): ")
    if new_summary == 'quit':
        break
    new_summary_vector = vectorizer.transform([new_summary])
    predicted_disease = clf.predict(new_summary_vector)
    if predicted_disease[0] == "Unknown":
        print("Unable to predict disease.")
    else:
        probability = clf.predict_proba(new_summary_vector)[0]
        print("Predicted disease:", predicted_disease[0])
        print("Accuracy:", probability.max())
        correct = input("Is the prediction correct? (y/n): ")
        if correct == "n":
            new_disease = input("Enter the correct disease: ")
            # Update the dataset with the corrected information
            new_data = pd.DataFrame({'summary': [new_summary], 'disease': [new_disease]})
            data = pd.concat([data, new_data], ignore_index=True)
            data.to_csv('patient_data.csv', index=False)
            summaries = data['summary']
            diseases = data['disease']
            X = vectorizer.fit_transform(summaries)
            clf.fit(X, diseases)
            # Re-evaluate the accuracy of the classifier
            X_pred = clf.predict(X)
            accuracy = accuracy_score(diseases, X_pred)
            print("Dataset updated.")
            print("New accuracy:", accuracy)
        else:
            print("Prediction is correct.")